print(paste("------------------------------ Niche breadth of", species, ":", results_ordered$env_breadth[1]))
}
if (export == TRUE) {
write_csv(results_ordered %>% mutate(Species = species), paste("./../3_generated_data/res_maxent_result_tables/", species, "_maxent_results.csv", sep = ""))
}
if (p_lot == TRUE) {
predSel <- predictMaxnet(m, bgMask,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_local.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
predSel <- predictMaxnet(m, envs,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_global.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
}
}
}
run.maxnet(occurrences_df = ds,
species_list = "Campanula_thyrsoides",
env_values = envs)
#    # Reading in the species' occurrences
Points <- subset(occurrences_df, Species == species) %>%
distinct(.keep_all = TRUE) %>%
as.data.frame(.)
n_obs_total = nrow(Points)
dir <- paste("./../tmp/res_OGR_shapefiles/", sep = "")
sp.occ <- Points
coordinates(sp.occ) <- c('longitude','latitude')
writeOGR(sp.occ,
dir,
layer = paste("Points", species, sep = "_"),
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
sp.occ <- readOGR(dir, paste("Points", species ,sep = "_"))
sp.occ <- as.data.frame(sp.occ)
# Locality data thinning using spThin package thin.par is distance in km
presences_thinned <- spThin::thin(sp.occ, lat.col = "coords.x1", long.col = "coords.x2", spec.col = "Species",
thin.par = 5, reps = 5, locs.thinned.list.return = TRUE, write.files = TRUE,
max.files = 5, out.dir = paste("./../tmp/res_thinned_presences/", species, "_thinned_data", sep = ""),
out.base = "thinned_data", write.log.file = TRUE, log.file = "spatial_thin_log.txt",
verbose = TRUE)
sp.occs.thinned <- as.data.frame(presences_thinned[[1]]) %>%
rename(latitude = Latitude) %>%
rename(longitude = Longitude) %>%
mutate(Species = species) %>%
distinct(.keep_all = TRUE) %>%
dplyr::left_join(., sp.occ, by = c("Species", "latitude", "longitude")) %>%
dplyr::select(Species, longitude, latitude, occID, country, source, accepted_name, family)
run.maxnet <- function(species_list, #                      # List of species to model
occurrences_df, #                    # Data frame with the coordinates c("latitude", "longitude") of the species occurrences
env_values, #                        # raster::brick of the chosen environmental variables
min_nr_occ = 10, #                   # Minimum number of occurrences for each species, else no modelling
export = TRUE,#                      # If the function has to export the final files or not. Useful for debuggin
bg_Sel_threshold = 1000, #           # Threshold for the selection of the background geographic range. Values below will select for "points buffers", values above for "minimum convex polygon"
bgBuf_radius_degrees = 4,#           # Buffer of the selected background geographic range
p_lot = FALSE, #                     # Set to TRUE to plot geographically the model with the best fit
p_lot_unplotted = FALSE,#            # Set to TRUE to plot geographically the species with have not yet been plotted
debug = FALSE) {#                    # Set to TRUE to get printed information avout the run of the model
for (species in species_list){
# Checking if the species has already been modelled or dropped.
if (file.exists(paste("./../3_generated_data/res_maxent_result_tables/", species, "_maxent_results.csv", sep = "")) == TRUE) {
if (debug == TRUE) {
print(paste("Already modelled:", species))
}
next
}
#    # Reading in the species' occurrences
Points <- subset(occurrences_df, Species == species) %>%
distinct(.keep_all = TRUE) %>%
as.data.frame(.)
n_obs_total = nrow(Points)
#if (debug == TRUE) {print(paste("n_obs_total: ", n_obs_total, sep = ""))}
dir <- paste("./../tmp/res_OGR_shapefiles/", sep = "")
sp.occ <- Points
coordinates(sp.occ) <- c('longitude','latitude')
writeOGR(sp.occ,
dir,
layer = paste("Points", species, sep = "_"),
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
sp.occ <- readOGR(dir, paste("Points", species ,sep = "_"))
sp.occ <- as.data.frame(sp.occ)
# Locality data thinning using spThin package thin.par is distance in km
presences_thinned <- spThin::thin(sp.occ, lat.col = "coords.x1", long.col = "coords.x2", spec.col = "Species",
thin.par = 5, reps = 5, locs.thinned.list.return = TRUE, write.files = TRUE,
max.files = 5, out.dir = paste("./../tmp/res_thinned_presences/", species, "_thinned_data", sep = ""),
out.base = "thinned_data", write.log.file = TRUE, log.file = "spatial_thin_log.txt",
verbose = TRUE)
sp.occs.thinned <- as.data.frame(presences_thinned[[1]]) %>%
rename(latitude = Latitude) %>%
rename(longitude = Longitude) %>%
mutate(Species = species) %>%
distinct(.keep_all = TRUE) %>%
dplyr::left_join(., Points, by = c("Species", "latitude", "longitude")) %>%
dplyr::select(Species, longitude, latitude, occID, country, source, accepted_name, family)
occs_xy <- sp.occs.thinned[c('longitude', 'latitude')]
occs_vals <- data.frame(raster::extract(env_values, occs_xy, cellnumbers = TRUE))
# Removing occurrence records with NA environmental values
sp.occs.thinned <- sp.occs.thinned[!(rowSums(is.na(occs_vals)) >= 1), ]
# also removing variable value rows with NA environmental values
occs_vals <- na.omit(occs_vals)
# adding columns for env variable values for each occurrence record
sp.occs.thinned.vals <- cbind(sp.occs.thinned, occs_vals)
# Reducing the observations to one per cell
sp.occs.thinned.vals <- sp.occs.thinned.vals[!duplicated(sp.occs.thinned.vals[, 'cells']), ] %>%
dplyr::select(-cells)
n_inc_obs = nrow(sp.occs.thinned.vals)
if (debug == TRUE) {print(paste("n_inc_obs: ", n_inc_obs, sep = ""))}
# Dropping species with less than the minimum number of observations
# for those, no model is created just a file with the name of the species and the number of observations
if (n_inc_obs <= min_nr_occ){
if (debug == TRUE) {print("Not enough points. Modelling stopped.")}
dropped_species <- as.data.frame(t(c(species, n_obs_total, n_inc_obs)))
colnames(dropped_species) <- c("Species", "n_inc_obs", "n_inc_obs")
if (export == TRUE) {write_csv(dropped_species, paste("./../3_generated_data/res_dropped_species/", species, "_dropped.csv", sep = ""))}
next
}
# Selection of the background extent
# For species with few points "points buffers" and for species with a large number of points "minimum convex polygon"
# this difference is due to the computationally intensive task of selecting "points buffers" for large species
if (n_inc_obs <= bg_Sel_threshold) {
bg_Sel = "point buffers"
if (debug == TRUE) {print(paste("The number of observations is <=", bg_Sel_threshold, "using 'POINT BUFFER"))}
} else {
bg_Sel = "minimum convex polygon"
if (debug == TRUE) {print(paste("The number of observations is >", bg_Sel_threshold, "using 'MCP"))}
}
# Generate background extent
bgExt <- wallace::penvs_bgExtent(
occs = sp.occs.thinned.vals,
bgSel = bg_Sel,
bgBuf = bgBuf_radius_degrees)
# Mask environmental data to provided extent
bgMask <- wallace::penvs_bgMask(
occs = sp.occs.thinned.vals,
envs = envs,
bgExt = bgExt)
# Plotting the models geographically, without needing to run the models again
if (p_lot_unplotted == TRUE) {
if (file.exists(paste("./../3_generated_data/res_saved_models/", species, "_models.rds", sep = ""))) {
if (file.exists(paste("./../3_generated_data/res_SDM_plots/", species, "_global.png", sep = ""))) {next} else {
if (debug == TRUE) {print(paste("Generating plot for unplotted species:", species))}
models <- readRDS(paste("./../generated_data/res_saved_models/", species, "_models.rds", sep = ""))
results_ordered <- models@results[order(models@results$or.mtp.avg, -models@results$auc.val.avg),] %>%
mutate(env_breadth = NA) %>%
mutate(Species = species) %>%
mutate(n_obs_total = n_obs_total) %>%
mutate(n_inc_obs = n_inc_obs) %>%
dplyr::select(Species, env_breadth, n_inc_obs, everything())
# Exporting the best model as a .rds file
best_modelOR <- as.integer(rownames(results_ordered[1,]))
m <- models@models[[best_modelOR]]
env_breadth <- read_csv(list.files(path="./../3_generated_data/res_maxent_result_tables/", pattern= paste(species, "_maxent_results.csv", sep = ""), full.names=TRUE)) %>%
filter(Species == species) %>%
.$env_breadth
predSel <- wallace::predictMaxnet(m, bgMask,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../tmp/res_SDM_plots/", species, "_local.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
predSel <- wallace::predictMaxnet(m, envs,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../tmp/res_SDM_plots/", species, "_global.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
next
}
}
}
# Sample background points from the provided area
AvPoints <- raster::ncell(bgMask) - raster::freq(bgMask, value = NA)[[1]]
if (AvPoints >= 10000) {numberPoints <- 10000} else {numberPoints <- AvPoints}
bgSample <- wallace::penvs_bgSample(
occs = sp.occs.thinned.vals,
bgMask =  bgMask,
bgPtsNum = numberPoints)
# Extract values of environmental layers for each background point
bgEnvsVals <- as.data.frame(raster::extract(bgMask,  bgSample))
##Add extracted values to background points table
bgEnvsVals <- cbind(occID = NA, Species = paste0("bg_", species), bgSample, bgEnvsVals)
### Partition occurrence data
#Partition occurrences and background points for model training and
#validation using “hierarchical checkerboard”, a spatial partition method
#with an aggregation factor of 2.
# R code to get partitioned data
groups <- wallace::part_partitionOccs(
occs = sp.occs.thinned.vals ,
bg =  bgSample,
method = "cb2",
bgMask = bgMask,
aggFact = 2)
#  Generating a species distribution model using the maxnet algorithm as
#  implemented in ENMeval V2.0 (with clamping = FALSE). For tuning using L
#  feature classes and regularization multipliers in the 1, 2 range
#  increasing by 1. Not using any categorical predictor variables.
# Run maxent model for the selected species
models <- my_model_maxent(
occs = sp.occs.thinned.vals,
bg = bgEnvsVals,
user.grp = groups,
bgMsk = bgMask,
rms = c(1, 4),
rmsStep =  0.5,
fcs = c('L','LQ'),
clampSel = TRUE,
algMaxent = "maxnet",
parallel = FALSE,
numCores = 1)
if (export == TRUE) {saveRDS(models, file = paste("./../3_generated_data/res_saved_models/", species, "_models.rds", sep = ""))}
# Select best model and obtain raster prediction
results_ordered <- models@results[order(models@results$or.mtp.avg, -models@results$auc.val.avg),] %>%
mutate(env_breadth = NA) %>%
mutate(Species = species) %>%
mutate(n_obs_total = n_obs_total) %>%
mutate(n_inc_obs = n_inc_obs) %>%
dplyr::select(Species, env_breadth, n_inc_obs, everything())
# Exporting the best model as a .rds file
best_modelOR <- as.integer(rownames(results_ordered[1,]))
m <- models@models[[best_modelOR]]
# Adding the enironmental breadth of the best model to the results table
results_ordered$env_breadth[1] <- as.numeric(env.breadth.cloglog(model = m, env = env_values))
if (debug == TRUE) {
print(paste("------------------------------ Niche breadth of", species, ":", results_ordered$env_breadth[1]))
}
if (export == TRUE) {
write_csv(results_ordered %>% mutate(Species = species), paste("./../3_generated_data/res_maxent_result_tables/", species, "_maxent_results.csv", sep = ""))
}
if (p_lot == TRUE) {
predSel <- predictMaxnet(m, bgMask,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_local.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
predSel <- predictMaxnet(m, envs,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_global.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
}
}
}
run.maxnet(occurrences_df = ds,
species_list = "Campanula_thyrsoides",
env_values = envs)
run.maxnet <- function(species_list, #                      # List of species to model
occurrences_df, #                    # Data frame with the coordinates c("latitude", "longitude") of the species occurrences
env_values, #                        # raster::brick of the chosen environmental variables
min_nr_occ = 10, #                   # Minimum number of occurrences for each species, else no modelling
export = TRUE,#                      # If the function has to export the final files or not. Useful for debuggin
bg_Sel_threshold = 1000, #           # Threshold for the selection of the background geographic range. Values below will select for "points buffers", values above for "minimum convex polygon"
bgBuf_radius_degrees = 4,#           # Buffer of the selected background geographic range
p_lot = FALSE, #                     # Set to TRUE to plot geographically the model with the best fit
p_lot_unplotted = FALSE,#            # Set to TRUE to plot geographically the species with have not yet been plotted
debug = FALSE) {#                    # Set to TRUE to get printed information avout the run of the model
for (species in species_list){
# Checking if the species has already been modelled or dropped.
if (file.exists(paste("./../3_generated_data/res_maxent_result_tables/", species, "_maxent_results.csv", sep = "")) == TRUE) {
if (debug == TRUE) {
print(paste("Already modelled:", species))
}
next
}
#    # Reading in the species' occurrences
Points <- subset(occurrences_df, Species == species) %>%
distinct(.keep_all = TRUE) %>%
as.data.frame(.)
n_obs_total = nrow(Points)
#if (debug == TRUE) {print(paste("n_obs_total: ", n_obs_total, sep = ""))}
dir <- paste("./../tmp/res_OGR_shapefiles/", sep = "")
sp.occ <- Points
coordinates(sp.occ) <- c('longitude','latitude')
writeOGR(sp.occ,
dir,
layer = paste("Points", species, sep = "_"),
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
sp.occ <- readOGR(dir, paste("Points", species ,sep = "_"))
sp.occ <- as.data.frame(sp.occ)
# Locality data thinning using spThin package thin.par is distance in km
presences_thinned <- spThin::thin(sp.occ, lat.col = "coords.x1", long.col = "coords.x2", spec.col = "Species",
thin.par = 5, reps = 5, locs.thinned.list.return = TRUE, write.files = TRUE,
max.files = 5, out.dir = paste("./../tmp/res_thinned_presences/", species, "_thinned_data", sep = ""),
out.base = "thinned_data", write.log.file = TRUE, log.file = "spatial_thin_log.txt",
verbose = TRUE)
sp.occs.thinned <- as.data.frame(presences_thinned[[1]]) %>%
rename(latitude = Latitude) %>%
rename(longitude = Longitude) %>%
mutate(Species = species) %>%
distinct(.keep_all = TRUE) %>%
dplyr::left_join(., Points, by = c("Species", "latitude", "longitude")) %>%
dplyr::select(Species, longitude, latitude, occID, country, source, accepted_name, family)
occs_xy <- sp.occs.thinned[c('longitude', 'latitude')]
occs_vals <- data.frame(raster::extract(env_values, occs_xy, cellnumbers = TRUE))
# Removing occurrence records with NA environmental values
sp.occs.thinned <- sp.occs.thinned[!(rowSums(is.na(occs_vals)) >= 1), ]
# also removing variable value rows with NA environmental values
occs_vals <- na.omit(occs_vals)
# adding columns for env variable values for each occurrence record
sp.occs.thinned.vals <- cbind(sp.occs.thinned, occs_vals)
# Reducing the observations to one per cell
sp.occs.thinned.vals <- sp.occs.thinned.vals[!duplicated(sp.occs.thinned.vals[, 'cells']), ] %>%
dplyr::select(-cells)
n_inc_obs = nrow(sp.occs.thinned.vals)
if (debug == TRUE) {print(paste("n_inc_obs: ", n_inc_obs, sep = ""))}
# Dropping species with less than the minimum number of observations
# for those, no model is created just a file with the name of the species and the number of observations
if (n_inc_obs <= min_nr_occ){
if (debug == TRUE) {print("Not enough points. Modelling stopped.")}
dropped_species <- as.data.frame(t(c(species, n_obs_total, n_inc_obs)))
colnames(dropped_species) <- c("Species", "n_inc_obs", "n_inc_obs")
if (export == TRUE) {write_csv(dropped_species, paste("./../3_generated_data/res_dropped_species/", species, "_dropped.csv", sep = ""))}
next
}
# Selection of the background extent
# For species with few points "points buffers" and for species with a large number of points "minimum convex polygon"
# this difference is due to the computationally intensive task of selecting "points buffers" for large species
if (n_inc_obs <= bg_Sel_threshold) {
bg_Sel = "point buffers"
if (debug == TRUE) {print(paste("The number of observations is <=", bg_Sel_threshold, "using 'POINT BUFFER"))}
} else {
bg_Sel = "minimum convex polygon"
if (debug == TRUE) {print(paste("The number of observations is >", bg_Sel_threshold, "using 'MCP"))}
}
# Generate background extent
bgExt <- wallace::penvs_bgExtent(
occs = sp.occs.thinned.vals,
bgSel = bg_Sel,
bgBuf = bgBuf_radius_degrees)
# Mask environmental data to provided extent
bgMask <- wallace::penvs_bgMask(
occs = sp.occs.thinned.vals,
envs = envs,
bgExt = bgExt)
# Plotting the models geographically, without needing to run the models again
if (p_lot_unplotted == TRUE) {
if (file.exists(paste("./../3_generated_data/res_saved_models/", species, "_models.rds", sep = ""))) {
if (file.exists(paste("./../3_generated_data/res_SDM_plots/", species, "_global.png", sep = ""))) {next} else {
if (debug == TRUE) {print(paste("Generating plot for unplotted species:", species))}
models <- readRDS(paste("./../generated_data/res_saved_models/", species, "_models.rds", sep = ""))
results_ordered <- models@results[order(models@results$or.mtp.avg, -models@results$auc.val.avg),] %>%
mutate(env_breadth = NA) %>%
mutate(Species = species) %>%
mutate(n_obs_total = n_obs_total) %>%
mutate(n_inc_obs = n_inc_obs) %>%
dplyr::select(Species, env_breadth, n_inc_obs, everything())
# Exporting the best model as a .rds file
best_modelOR <- as.integer(rownames(results_ordered[1,]))
m <- models@models[[best_modelOR]]
env_breadth <- read_csv(list.files(path="./../3_generated_data/res_maxent_result_tables/", pattern= paste(species, "_maxent_results.csv", sep = ""), full.names=TRUE)) %>%
filter(Species == species) %>%
.$env_breadth
predSel <- wallace::predictMaxnet(m, bgMask,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../tmp/res_SDM_plots/", species, "_local.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
predSel <- wallace::predictMaxnet(m, envs,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../tmp/res_SDM_plots/", species, "_global.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
next
}
}
}
# Sample background points from the provided area
AvPoints <- raster::ncell(bgMask) - raster::freq(bgMask, value = NA)[[1]]
if (AvPoints >= 10000) {numberPoints <- 10000} else {numberPoints <- AvPoints}
bgSample <- wallace::penvs_bgSample(
occs = sp.occs.thinned.vals,
bgMask =  bgMask,
bgPtsNum = numberPoints)
# Extract values of environmental layers for each background point
bgEnvsVals <- as.data.frame(raster::extract(bgMask,  bgSample))
##Add extracted values to background points table
bgEnvsVals <- cbind(occID = NA, Species = paste0("bg_", species), bgSample, bgEnvsVals)
### Partition occurrence data
#Partition occurrences and background points for model training and
#validation using “hierarchical checkerboard”, a spatial partition method
#with an aggregation factor of 2.
# R code to get partitioned data
groups <- wallace::part_partitionOccs(
occs = sp.occs.thinned.vals ,
bg =  bgSample,
method = "cb2",
bgMask = bgMask,
aggFact = 2)
#  Generating a species distribution model using the maxnet algorithm as
#  implemented in ENMeval V2.0 (with clamping = FALSE). For tuning using L
#  feature classes and regularization multipliers in the 1, 2 range
#  increasing by 1. Not using any categorical predictor variables.
# Run maxent model for the selected species
models <- my_model_maxent(
occs = sp.occs.thinned.vals,
bg = bgEnvsVals,
user.grp = groups,
bgMsk = bgMask,
rms = c(1, 4),
rmsStep =  0.5,
fcs = c('L','LQ'),
clampSel = TRUE,
algMaxent = "maxnet",
parallel = FALSE,
numCores = 1)
if (export == TRUE) {saveRDS(models, file = paste("./../3_generated_data/res_saved_models/", species, "_models.rds", sep = ""))}
# Select best model and obtain raster prediction
results_ordered <- models@results[order(models@results$or.mtp.avg, -models@results$auc.val.avg),] %>%
mutate(env_breadth = NA) %>%
mutate(Species = species) %>%
mutate(n_obs_total = n_obs_total) %>%
mutate(n_inc_obs = n_inc_obs) %>%
dplyr::select(Species, env_breadth, n_inc_obs, everything())
# Exporting the best model as a .rds file
best_modelOR <- as.integer(rownames(results_ordered[1,]))
m <- models@models[[best_modelOR]]
# Adding the enironmental breadth of the best model to the results table
results_ordered$env_breadth[1] <- as.numeric(env.breadth.cloglog(model = m, env = env_values))
if (debug == TRUE) {
print(paste("------------------------------ Niche breadth of", species, ":", results_ordered$env_breadth[1]))
}
if (export == TRUE) {
write_csv(results_ordered %>% mutate(Species = species), paste("./../3_generated_data/res_maxent_result_tables/", species, "_maxent_results.csv", sep = ""))
}
if (p_lot == TRUE) {
predSel <- predictMaxnet(m, bgMask,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_local.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
predSel <- predictMaxnet(m, envs,
type = "cloglog",
clamp = TRUE)
grDevices::png(filename = paste("./../temp/res_SDM_plots/", species, "_global.png", sep = ""),
width = 4, height = 4, units = 'in', res = 1200)
plot(predSel, main = paste(species, "\nenv.breadth = ", round(results_ordered$env_breadth[1], 3), sep = ""),
sub = paste("nobs: ", n_inc_obs,
"; or.mtp.avg: ", round(results_ordered$or.mtp.avg[1], digits = 2),
"\nauc.val.avg: ", round(results_ordered$auc.val.avg[1], digits = 2),
"; or.10p.avg: ", round(results_ordered$or.10p.avg[1], digits = 2),
sep = ""))
dev.off()
}
}
}
run.maxnet(occurrences_df = ds,
species_list = "Campanula_thyrsoides",
env_values = envs)
